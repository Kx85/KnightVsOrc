#pragma once
#include <string>
#include <vector>
#include "Fight.h"
class FightBeginScreen
{
public:
	const std::string getTextToDisplay(Fight* f);

private:
	std::string updateWithChar(std::string text, Fight* f, const int index);

	std::vector<std::string> text {
R"(+-----------------------------------------------------------------------------------------------------+)",
R"(|                                                   / /                                               |)",
R"(|                                                  / /                                                |)",
R"(|                                                 / /                                                 |)",
R"(|                                                / /                                                  |)",
R"(|                                               / /                                                   |)",
R"(|                                              / /                                                    |)",
R"(|                                             / /                                                     |)",
R"(|                                            / /                                                      |)",
R"(|                                           / ----------                                              |)",
R"(|                                          ---------- /                                               |)",
R"(|                                                  / /                                                |)",
R"(|                                            _   ______                                               |)",
R"(|                                           | | / / __/                                               |)",
R"(|                                           | |/ /\ \                                                 |)",
R"(|                                           |___/___/                                                 |)",
R"(|                                                                                                     |)",
R"(|                                            / /                                                      |)",
R"(|                                           / ----------                                              |)",
R"(|                                          ---------- /                                               |)",
R"(|                                                  / /                                                |)",
R"(|                                                 / /                                                 |)",
R"(|                                                / /                                                  |)",
R"(|                                               / /                                                   |)",
R"(|                                              / /                                                    |)",
R"(|                                             / /                                                     |)",
R"(|                                            / /                                                      |)",
R"(|                                           / /                                                       |)",
R"(+-----------------------------------------------------------------------------------------------------+)"
	};

	std::vector<std::string> knight{
R"(------------------------)",
R"(                        )",
R"(                        )",
R"( /\                     )",
R"( ||                     )",
R"( ||                     )",
R"( ||                     )",
R"( ||           {}        )",
R"( ||          .--.       )",
R"( ||         /.--.\      )",
R"( ||         |====|      )",
R"( ||         |`::`|      )",
R"(_||_    .-;`\..../`;-.  )",
R"( /\\   /  |...::...|  \ )",
R"( |:'\ |   /'''::'''\   |)",
R"(  \ /\;-,/\   ::   /\--;)",
R"(   \ <` >  >._::_.<,<__>)",
R"(    `""`  /   ^^   \|  |)",
R"(          |        |\::/)",
R"(          |        |/|||)",
R"(          |___/\___| ''')",
R"(           \_ || _/     )",
R"(           <_ >< _>     )",
R"(           |  ||  |     )",
R"(           |  ||  |     )",
R"(          _\.:||:./_    )",
R"(         /____/\____\   )",
R"(                        )",
R"(------------------------)"
	};


	std::vector<std::string> orc{
R"(--------------------)",
R"(                    )",
R"(                    )",
R"(                    )",
R"(           _   __   )",
R"(          | | _) \  )",
R"(          | |     \ )",
R"(          | |      >)",
R"(          | | _   / )",
R"(    ___   | |  )_/  )",
R"(  _/___\_ | |       )",
R"( _\\___//_| |       )",
R"(/. \/_\/ .| |       )",
R"(|-   -|.  | |\      )",
R"(\ {/} /_/ \ |/      )",
R"( \___/=]|]|_|       )",
R"( ||  /\  ||         )",
R"( |  |  |  |         )",
R"( ([]|  |[])         )",
R"( |_ |  | _|         )",
R"( |  |  |  |         )",
R"([___|  |___]        )",
R"(                    )",
R"(                    )",
R"(                    )",
R"(                    )",
R"(                    )",
R"(                    )",
R"(--------------------)"
	};

	std::vector<std::string> custom{
R"(----------------------)",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(      ////^\\\\       )",
R"(      | ^   ^ |       )",
R"(     @ (o) (o) @      )",
R"(      |   <   |       )",
R"(      |  ___  |       )",
R"(       \_____/        )",
R"(     ____|  |____     )",
R"(    /    \__/    \    )",
R"(   /              \   )",
R"(  /\_/|        |\_/\  )",
R"( / /  |        |  \ \ )",
R"(( <   |        |   > ))",
R"( \ \  |        |  / / )",
R"(  \ \ |________| / /  )",
R"(  \ \|                )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(                      )",
R"(----------------------)"
	};
};
